---
import * as sass from 'sass';
import path, {dirname} from 'path';

import {getCollection, getEntry} from 'astro:content';

export async function getStaticPaths() {
    const docsCollection = await getCollection('docs');
    const iframes = [];

    for (let i = 0; i < docsCollection.length; i++) {

        // console.log(...docsCollection[i].body.toStri);
        const regexp = new RegExp('(\\bframe_url\\b)={["\']?((?:.(?!["\']?\\s+(?:\\S+)=|\\s*\\/?[>"\']))+.)["\']}?', 'gi');
        if(docsCollection[i].body) {
            const matches = [...docsCollection[i].body?.toString().matchAll(regexp)];

            if (matches.length !== 0) {
                // Check if we have multiply iframe inside document
                if (matches.length > 1) {
                    for (let j = 0; j < matches.length; j++) {
                        let temp_el = {...docsCollection[i]};
                        temp_el.frame_url = matches[j]['2'];
                        iframes.push(temp_el);
                    }
                } else {
                    docsCollection[i].frame_url = matches[0]['2'];
                    iframes.push(docsCollection[i]);
                }
            }
        }
    }

    return iframes.map((doc) => {

        return {
            params: {
                slug: doc?.frame_url,
            },
            props: doc
        }
    })
}

const {slug} = Astro?.props;

if (slug === undefined) {
    throw new Error('Slug is required');
}

// 2. Query for the entry directly using the request slug
const page = await getEntry('docs', slug);

// 3. Redirect if the entry does not exist
if (page === undefined) {
    return Astro.redirect('/404');
}

const page_content = page.body.toString();
const frame_index = parseInt(Astro.props.frame_url.slice('/').at(-1));

const snippet_regexp = new RegExp('<Snippet[^>]*>([^<]*(?:(?!<\\/?Snippet)<[^<]*)*)<\\/Snippet\\s*>', 'gi');
const snippet_matches = [...page_content.matchAll(snippet_regexp)];

// @TODO add iframe preload later
// @TODO improve regex later
const fragment_regexp = new RegExp('<Fragment[^>]*>([^<]*(?:(?!<\\/?Fragment)<[^<]*)*)<\\/Fragment\\s*>', 'gi');
const fragment_matches = [...snippet_matches[(frame_index - 1).toString()]['0'].matchAll(fragment_regexp)];

//@todo find better solution

const html = fragment_matches['0'] && fragment_matches['0'].hasOwnProperty('1') ? fragment_matches['0']['1']
    .replace('```html', '')
    .replace('```', '') : '';

const scss = await sass.compileStringAsync(fragment_matches['1'] && fragment_matches['1'].hasOwnProperty('1') ?
    fragment_matches['1']['1']
        .replace('```scss', '')
        .replace('```', '') : '', {
    importers: [{
        // An importer that redirects relative URLs starting with "~" to
        // `node_modules`.
        findFileUrl(url) {
            if (url.startsWith('~')) {
                return new URL(`file://` + path.resolve(process.cwd()) + url.substring(1));
            }
            if (url.startsWith('@')) {
                return import.meta.env.PROD ?
                    new URL(`file://` + path.resolve(process.cwd()) + '/node_modules/@' + url.substring(1)) :
                    new URL(`file://` + path.resolve(process.cwd()) + '/src/styles/scss/' + url.substring(1).replace('nulllogic/scssleon/scss/', ''))
            }

            return null;
        }
    }]
});

const js = fragment_matches['2'] && fragment_matches['2'].hasOwnProperty('1') ?
    fragment_matches['2']['1']
        .replace('```js', '')
        .replace('```', '') : '';
---
<!DOCTYPE html>
<html>
<head>
    <style set:html={scss.css}/>
</head>
<body>

<div class="wrapper">
    <div class="iframe" set:html={html}/>
    <div class="background"/>
</div>

<script is:inline type="text/javascript" set:html={js}/>
</body>
</html>

<style lang="scss">
  .wrapper {
    position: relative;

    .iframe {
      padding: 1rem;
      position: relative;
      z-index: 2;
    }

    .background {

      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      z-index: 1;

      -webkit-user-select: none;
      user-select: none;

      background-color: rgba(19, 38, 81, 0.1);
      background-image: linear-gradient(135deg, rgba(19, 83, 14, 0.45) 10%, rgba(0, 0, 0, 0) 0, #0000 50%, rgba(19, 83, 14, 0.45) 0, rgba(19, 83, 14, 0.45) 60%, rgba(0, 0, 0, 0) 0, rgba(0, 0, 0, 0));
      background-size: 7.07px 7.07px;
    }
  }
</style>

<style is:global lang="scss">
  @use "sass:list";
  @use "sass:meta";

  @use "~/styles/app.scss" as app;

  // â†“ Root
  @use "~/styles/scss/root" with (
    $config: app.$config,
    $theme: app.$theme
  );

  // Great reset
  @use "~/styles/scss/reset" with (
    $config: app.$config,
    $theme: app.$theme
  );

  // Base
  // Special utility, that will dynamically generate CSS
  // properties for HTML tags, specified in theme
  @use "~/styles/scss/base" with (
    $config: app.$config,
    $theme: app.$theme
  );

  // Base
  // Special utility, that will dynamically generate CSS
  // properties for HTML tags, specified in theme
  @use "~/styles/scss/content" with (
    $config: app.$config,
    $theme: app.$theme
  );
</style>
