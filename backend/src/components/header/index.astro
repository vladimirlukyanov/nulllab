---
import type { HTMLAttributes } from 'astro/types'
import Logo from '~/components/logo/index.astro'
import { getCollection } from 'astro:content'

const { href, class: className, ...props } = Astro.props

const { pathname } = Astro.url

const isActive = href === pathname || href === pathname.replace(/\/$/, '')
const categories = (await getCollection('categories')).sort((a, b) => {
  if (a.id < b.id) {
    return -1
  }
  if (a.id > b.id) {
    return 1
  }
  return 0
})

// development & research
---

<!--
<a href={href} class:list={[className, { active: isActive }]} {...props}>
  <slot />
</a>
-->
<div class="header top">
    <div class="container xxl">
        <nav class="navbar">
            <div class="left">
                <ul class="nav">
                    <li class="item">

                    </li>
                    <li class="item">

                    </li>
                </ul>
            </div>
            <div class="center">
                <a href="/" class="link">
                    <span class="logo-wrapper">
                        <Logo/>
                        <span class="slogan">development & research</span>
                    </span>
                </a>
            </div>
            <div class="right">
                <ul class="nav">
                    <li class="item">

                    </li>
                    <li class="item">

                    </li>
                </ul>
            </div>
        </nav>
    </div>
</div>

<header class="header bottom">
    <div class="container xxl">
        <nav class="navbar">
            <div class="left">
                <a href="/" class="link">
                    <Logo class="logo"/>
                </a>
            </div>
            <div class="center">
                <ul class="nav">
                  {categories.length > 0 &&
                    categories.map((category) => {
                      return (
                              <li class="item">
                                  <a href={`/category/${category.id}/`}
                                     class="link">
                                    {category.data.title}
                                  </a>
                              </li>
                      )
                    })
                  }
                </ul>
            </div>
            <div class="right">
                <a href="#" class="link toggle mainmenu">
                    <svg viewBox="0 0 24 24" fill="none"
                         stroke="currentColor" stroke-width="1.5"
                         data-slot="icon" aria-hidden="true"
                         width="24px">
                        <path d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
                              stroke-linecap="round"
                              stroke-linejoin="round"></path>
                    </svg>
                </a>
            </div>
        </nav>
    </div>
</header>

<style lang="scss">

  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "~/styles/app.scss" as app;

  $header-top: (
    opacity: 1,
    display: inherit,
    //
    border-bottom: var(--border-bottom),
    background: var(--background),
    //
    _colors : (
      dark : (
        background: linear-gradient(rgba(0, 0, 0, 0) 0px, oklch(0.52 0.08 187.39 / 0.2) 125%),
      )
    ),
    _subclasses: (
      '.navbar' : (
        padding: 0 0 10px 0,
        margin: 0 0 5px 0,
        --navbar-grid-template-columns: 1fr auto 1fr,
      ),
      '.logo-wrapper' : (
        display: flex,
        flex-direction: column,
        align-items: center,
        /***/
        _subclasses: (
          /***/
          '.slogan' : (
            opacity: 1,
            display: inherit,
            font-family: string.unquote('monospace, sans-serif'),
            font-size: 0.825rem,
          )
        )
      )
    ),
  );

  $header-bottom: (
    min-height: 41px,
    padding-inline: var(global(--padding-inline)),
    border-bottom: var(--border-bottom),
    background: var(--background),
    /***/
    _responsive : (
      xxl : (
        padding-block: 0,
      )
    ),
    /***/
    _subclasses: (
      '.navbar' : (
        --navbar-grid-template-columns: 1fr auto 1fr,
        padding: 10px 0,
        /***/
        _subclasses: (
          '.right' : (
            display: none,
            text-align: right,
          ),
          '.logo' : (
            display: none,
          ),
          '.nav' : (
            /***/
            _subclasses: (
              '.item' : (
                _subclasses: (
                  '.link' : (
                    padding: 0 5px,
                    /***/
                    _subclasses: (
                      '&:hover' : (
                        text-decoration: underline,
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  );

  $header-bottom-modify: (
    _subclasses : (
      '.navbar' : (
        --navbar-grid-template-columns: auto 1fr,
        _subclasses : (
          '.left' : (
            display: inherit,
          ),
          '.center' : (
            display: none,
            _responsive : (
              xl : (
                display: inherit,
              )
            )
          ),
          '.right' : (
            display: inherit,
            _responsive : (
              lg : (
                display: none,
              )
            )
          ),
          '.logo' : (
            width: 100px,
            height: auto,
            display: block,
            transition: string.unquote('opacity 0.25s ease-out, display 0.25s ease-out allow-discrete'),
            /***/
            _atrule : (
              '@starting-style' : (
                opacity: 1,
              )
            ),
          )
        )
      ),
    )
  );

  $header-sticky: (
    position: sticky,
    -webkit-backdrop-filter: blur(10px),
    backdrop-filter: blur(10px),
    box-shadow: string.unquote("rgba(13, 13, 17, 0.4) 0px 5px 25px")
  );

  $header-section: (
    top: 0,
    position: relative,
    z-index: app.get-config(app.$config, 'z-index.header'),
    /***/
    _colors: (
      dark: (
        background: oklch(0.52 0.08 187.39 / 0.2),
        border-bottom: 1px solid oklch(0.37 0.03 210.45 / 0.5),
      ),
    ),
    /***/
    _subclasses: (
      '&.top' : $header-top,
      '&.bottom' : $header-bottom,
      '&.sticky': $header-sticky,
      '&.bottom.modify': $header-bottom-modify,
    ),
  );

  @include app.generate-component(
      $header-section,
      'header',
      app.$config,
      app.$theme,
      (variable: (exclude : ('nav', 'navbar')))
  );
</style>

<script>
  const nav_top = document.querySelector('.header.top')
  const nav_bottom = document.querySelector('.header.bottom')

  const stickyNavigation = () => {
    if (window.scrollY > nav_top.offsetHeight) {
      // nav offsetHeight = height of nav
      nav_top.classList.add('modify')
      nav_bottom.classList.add('sticky', 'modify')
    } else {
      nav_top.classList.remove('modify')
      nav_bottom.classList.remove('sticky', 'modify')
    }
  }

  window.addEventListener('scroll', stickyNavigation)
</script>

<script>

  const light_dark_toggler = document.querySelector('.toggle.dark_mode');

  if (light_dark_toggler) {
    light_dark_toggler.addEventListener('click', (e) => {
      e.preventDefault();

      light_dark_toggler.classList.add('clicked');

      const current_theme = document.documentElement.getAttribute('data-theme')
      const new_theme = current_theme === 'dark' ? 'light' : 'dark'
      document.documentElement.setAttribute('data-theme', new_theme)

      document.body.classList.add('preload');
      localStorage.setItem('theme', new_theme)
      setTimeout(() => {
        document.body.classList.remove('preload');
      }, 200)
      const event = new CustomEvent('theme_change', {
        detail: {
          theme: new_theme,
        },
      })
      document.dispatchEvent(event);
    })
  }

  const nav = document.querySelector('.header.bottom');
  const buttons = nav.querySelectorAll('.link.toggle');

  buttons.forEach(button => button.addEventListener('click', (e) => {
    e.preventDefault();

    if (button.classList.contains('mainmenu')) {
      document.getElementById('main_mobile_menu').classList.toggle('show');
      document.body.toggleAttribute('scroll-lock');
    }
  }))

</script>