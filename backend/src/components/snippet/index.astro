---
import prettier from "prettier";
import {getHighlighter} from "shiki";

let slots = [];
Object.keys(Astro.slots).forEach((element) => {
  if (element !== "default") return slots.push(Astro.slots.render(element));
});

const props = await Promise.all(slots);

// HTML
const html_code_formatted =
  typeof props[0] !== 'undefined' && props[0] !== null
    ? await prettier.format(props[0]
      .replace(/&#x3C;/g, '<') // <–– @todo investigate the problem with wrong encoding/decoding
      .replace(/(<pre[^>]+?>|<pre>|<\/pre>)/gim, "")
      .replace(/(<code[^>]+?>|<code>|<\/code>)/gim, ""), {
      parser: 'html',
      printWidth: 80,
      htmlWhitespaceSensitivity: 'ignore' // <–– this option is making MDX HTML look good
    })
    : '';

// SCSS
const scss_code_formatted =
  typeof props[1] !== 'undefined' && props[1] !== null
    ? await prettier.format(props[1]
      .replace(/(<pre[^>]+?>|<pre>|<\/pre>)/gim, "")
      .replace(/(<code[^>]+?>|<code>|<\/code>)/gim, ""), {
      parser: 'scss',
    })
    : '';

// JS
const js_code_formatted =
  typeof props[2] !== 'undefined' && props[2] !== null
    ? await prettier.format(props[2]
      .replace(/&#x3C;/g, '<') // <–– @todo investigate the problem with wrong encoding/decoding
      .replace(/(<pre[^>]+?>|<pre>|<\/pre>)/gim, "")
      .replace(/(<code[^>]+?>|<code>|<\/code>)/gim, ""), {
      parser: 'babel',
    })
    : '';

// `getHighlighter` is async, it initializes the internal and
// loads the themes and languages specified.

const highlighter = await getHighlighter({
  themes: ['vitesse-dark'],
  langs: ['html', 'javascript', 'scss'],
});

// // Remove last line added by prettier using regex
const html_code_shiki = highlighter.codeToHtml(
  html_code_formatted
    .replace(/\n.*$/, ""),
  {
    lang: 'html',
    theme: 'vitesse-dark',
  },
);


const scss_code_shiki = highlighter.codeToHtml(
  scss_code_formatted.replace(/\n.*$/, ""),
  {
    lang: 'scss',
    theme: 'vitesse-dark',
  },
);

const js_code_shiki = highlighter.codeToHtml(
  js_code_formatted.replace(/\n.*$/, ""),
  {
    lang: 'javascript',
    theme: 'vitesse-dark',
  },
);
---

<div class="snippet">
  <div class="navtabs">
    <ul class="nav">
      {
        Astro.slots.has("html") && (
              <li class="item active">
                <a class="link" href="#">
                  HTML
                </a>
              </li>
        )
      }
      {
        Astro.slots.has("scss") && (
              <li class="item">
                <a class="link" href="#">
                  SCSS
                </a>
              </li>
        )
      }
      {
        Astro.slots.has("js") && (
              <li class="item">
                <a class="link" href="#">
                  JS
                </a>
              </li>
        )
      }
    </ul>
  </div>

  <div class="preview-container">
    {
      Astro.slots.has("html") && (
            <div client:load class="preview" set:html={html_code_formatted}/>
      )
    }
    <div class="tab-content">
      {
        Astro.slots.has("html") && (
              <div class="tab active">
                <div client:load class="code" set:html={html_code_shiki}/>
              </div>
        )
      }
      {
        Astro.slots.has("scss") && (
              <div class="tab">
                <div client:load class="code" set:html={scss_code_shiki}/>
              </div>
        )
      }
      {
        Astro.slots.has("js") && (
              <div class="tab">
                <div class="code" set:html={js_code_shiki}/>
              </div>
        )
      }
    </div>

    <svg class="background">
      <defs>
        <pattern
            id="pattern-4d2f8758-2f66-4332-9b69-ca19e9dfc001"
            x="0"
            y="0"
            width="10"
            height="10"
            patternUnits="userSpaceOnUse"
        >
          <path d="M-3 13 15-5M-5 5l18-18M-1 21 17 3"></path>
        </pattern>
      </defs>
      <rect
          stroke="none"
          fill="url(#pattern-4d2f8758-2f66-4332-9b69-ca19e9dfc001)"
          width="100%"
          height="100%"></rect>
    </svg>

    <div class="resizer">
      <span class="drag">
        <span class="el"></span>
      </span>
    </div>
  </div>
</div>

<script>

  document.querySelectorAll('.snippet').forEach((snippet) => {

    // Tabs
    // Checking first, if element exist
    if (snippet.querySelector('.navtabs')) {
      const nav_items = snippet.querySelectorAll('.navtabs .nav .item');
      const tab_items = snippet.querySelectorAll('.tab-content .tab');

      nav_items.forEach((nav, index) => {
        nav.querySelectorAll('.link').forEach(element => element.addEventListener('click', function (e) {
          e.preventDefault();
          nav_items.forEach(element => element.classList.remove('active'));
          nav.classList.add('active');

          tab_items.forEach(element => element.classList.remove('active'));
          tab_items[index].classList.add('active');
        }));
      });
    }

    const preview = snippet.querySelector(".preview");
    if (preview) {
      // Proceed, if preview is enabled

      const resizer = snippet.querySelector(".preview .resizer .drag");
      if (resizer) {
        const container_limit = Math.round(preview.clientWidth / 1.5);

        resizer.onmousedown = (event) => {
          event.preventDefault();

          const original_margin = parseFloat(
            isNaN(preview.style.marginRight) ? preview.style.marginRight : 0,
          );
          const original_mouse_x = event.pageX;

          const event_drag_start_handler = (event) => {
            const width = original_margin - (event.pageX - original_mouse_x);
            if (width < container_limit && width > 0) {
              preview.style.marginRight = width + "px";
            } else if (width < 0) {
              preview.style.marginRight = 0 + "px";
            }
          };

          const event_drag_end_handler = (event) => {
            document.documentElement.classList.remove("dragging");
            document.removeEventListener("mousemove", event_drag_start_handler);
            document.removeEventListener("mouseup", event_drag_end_handler);
          };

          document.documentElement.classList.add("dragging");
          document.addEventListener("mousemove", event_drag_start_handler);
          document.addEventListener("mouseup", event_drag_end_handler);
        };
      }
    }
  });

  // // Clipboard
  // const clipboard = new ClipboardJS('.btn-clipboard', {
  //     target: trigger => trigger.closest('.code-snippet').querySelector('.highlight')
  // })
  //
  // clipboard.on('success', event => {
  //
  // })
  //
  // clipboard.on('error', event => {
  //
  // })
</script>

<script define:vars={{props}}>
  // eval(props[2].replace(/(<p[^>]+?>|<p>|<\/p>)/gim, ""));
</script>

<style lang="scss" is:global>
  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "../../styles/app.scss" as app;
  @use "../../styles/scss/mixins.scss" as mixins;
  @use "../../styles/scss/functions.scss" as functions;

  $nav: functions.get-theme(app.$theme, "components.nav");

  $nav: map.deep-merge(
      $nav,
      (
        subclasses: (
          ".item": (
            margin: 0 5px -1px 0,
            subclasses: (
              "&.active": (
                subclasses: (
                  ".link": (
                    text-decoration: none,
                    background: #333,
                    color: rgb(125, 211, 252),
                  ),
                  "&:hover": (),
                ),
              ),
              ".link": (
                text-decoration: none,
                border: 1px solid red,
                border-radius: 5px 5px 0 0,
                font-size: 0.825em,
                subclasses: (
                  "&:hover": (
                    background: #333,
                  ),
                ),
              ),
            ),
          ),
        ),
      )
  );

  $nav-tabs: (
    subclasses: (
      ".nav": $nav,
    ),
  );

  $preview-container: (
    subclasses: (
      ".preview": (
        position: relative,
        transition: 0.75s background-color,
        padding: 1rem,
        border: 1px solid red,
        border-bottom: none,
        border-radius: 5px 5px 0 0,
        subclasses: (
          "h1, h2, h3, h4, h5, h6, p, dl, ol, ul, nav ul, blockquote, pre, table:not(:last-child)" : (
            margin: 0
          ),
          "p" : (
            padding: 0
          ),
          " > .btn" : (
            margin: 0 10px 0 0
          )
        )
      ),
      ".tab-content": (
        subclasses: (
          ".tab": (
            display: none,
            subclasses: (
              "&.active": (
                display: block,
              ),
              ".code": (
                border: 1px solid red,
                border-top: none,
                border-radius: 0 0 5px 5px,
                display: block,
                margin-bottom: 0,
                width: 100%,
                position: relative,
                overflow: auto,
                subclasses: (
                  "pre": (
                    padding: 1rem,
                    subclasses: (
                      "code": (
                        word-break: normal,
                        background: none,
                        padding: 0,
                        font-size: 0.875em,
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ),
        ),
      ),
    ),
  );

  $snippet: (
    subclasses: (
      ".navtabs": (
        margin: 0 0 0 8px,
        subclasses: (
          ".nav": $nav,
        ),
      ),
      ".preview-container": $preview-container,
    ),
  );

  @include mixins.generate-component(
      $snippet,
      "snippet",
      app.$config,
      app.$theme
  );
</style>

<style lang="scss">
  /*
  .content {
    .astro-code {
      white-space: normal;
    }
  }

  .content .shiki {
    margin: 0;
    padding: 0.825rem;
  }

  .dragging {
    .snippet {
      .preview {
        &::after {
          background: rgba(58, 69, 82, 1);
        }
      }
    }

    & * {
      cursor: ew-resize;
      -webkit-user-select: none;
      user-select: none;
    }
  }

  @media (prefers-color-scheme: light) {
  }

  @media (prefers-color-scheme: dark) {
  }

  .snippet {
    position: relative;
    margin-bottom: 2rem;

    border-radius: 5px;
    border: 1px solid rgb(58, 69, 82);

    .preview {
      position: relative;
      transition: 0.75s background-color;
      padding: 1rem;

      .inline {
        position: relative;
        z-index: 10;
        display: block;
      }

      .background {
        stroke: rgba(40, 51, 56, 0.63);
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 1;

        -webkit-user-select: none;
        user-select: none;
      }

      &::after {
        width: 1px;
        height: 100%;
        position: absolute;
        top: 0;
        right: -1px;
        display: inline-block;
        background: transparent;
        transition: 0.75s background-color;
        content: "";
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p,
      dl,
      ol,
      ul,
      blockquote,
      pre,
      table:not(:last-child) {
        margin: 0;
      }

      .resizer {
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        -webkit-user-select: none;
        user-select: none;

        .drag {
          padding: 0.5rem;
          touch-action: pan-y;
          cursor: ew-resize;
          display: block;
          position: absolute;
          top: 50%;
          left: 0.75rem;
          transform: translate(-50%, -50%);
          user-select: none;

          .el {
            background: rgba(100, 116, 139, 0.6);
            border-radius: 10px;
            width: 0.375rem;
            height: 2rem;
            display: block;
          }
        }
      }
    }

    .code {
      display: block;
      margin-bottom: 0;
      width: 100%;
      position: relative;
      overflow: auto;

      code {
        word-break: normal;
        background: inherit;
      }
    }
  }
*/
</style>
