---
import {Preview} from "../preview";
import {generate_iframe_link} from "~/utils/links.ts";

let slots = [];

Object.keys(Astro.slots).forEach((element) => {
    if (element !== "default") return slots.push(Astro.slots.render(element));
});

const props = await Promise.all(slots);

// HTML
const html_code_formatted = typeof props[0] !== 'undefined' && props[0] !== null
    ? props[0]
    : '';

// SCSS
const scss_code_formatted =
    typeof props[1] !== 'undefined' && props[1] !== null ? props[1] : '';

// JS
const js_code_formatted =
    typeof props[2] !== 'undefined' && props[2] !== null ? props[2] : '';


const {frame_url, preview} = Astro.props;
---

<div class="snippet">
    <div class="card preview-container">
        {
            Astro.slots.has("html") && (
                        <div class="preview">
                            <Preview url={generate_iframe_link(frame_url)} />
                        </div>
            )
        }

        <div class="navtabs">
            <ul class="nav">
                {
                    Astro.slots.has("html") && (
                                <li class="item active">
                                    <a class="link" href="#">
                                        HTML
                                    </a>
                                </li>
                    )
                }
                {
                    Astro.slots.has("scss") && (
                                <li class="item">
                                    <a class="link" href="#">
                                        SCSS
                                    </a>
                                </li>
                    )
                }
                {
                    Astro.slots.has("js") && (
                                <li class="item">
                                    <a class="link" href="#">
                                        JS
                                    </a>
                                </li>
                    )
                }
            </ul>
        </div>

        <div class="tab-content">
            {
                Astro.slots.has("html") && (
                            <div class="tab active">
                                <div client:load class="code" set:html={html_code_formatted}/>
                            </div>
                )
            }
            {
                Astro.slots.has("scss") && (
                            <div class="tab">
                                <div client:load class="code" set:html={scss_code_formatted}/>
                            </div>
                )
            }
            {
                Astro.slots.has("js") && (
                            <div class="tab">
                                <div class="code" set:html={js_code_formatted}/>
                            </div>
                )
            }
        </div>

        <div class="resizer"><span class="drag"><span class="el"/></span></div>
    </div>
</div>

<style lang="scss" is:global>
  @use "sass:list";
  @use "sass:string";
  @use "sass:meta";
  @use "sass:map";

  @use "../../styles/app.scss" as app;
  @use "@nulllogic/scssleon/scss/mixins.scss" as mixins;
  @use "@nulllogic/scssleon/scss/functions.scss" as functions;

  $nav: functions.get-theme(app.$theme, "components.nav");

  $nav: map.deep-merge(
          $nav,
          (
              subclasses: (
                  ".item": (

                      subclasses: (
                          "&.active": (
                              subclasses: (
                                  ".link": (
                                      text-decoration: none,
                                      color: rgb(125, 211, 252),
                                      background: #0d1117,
                                  ),
                                  "&:hover": (),
                              ),
                          ),
                          ".link": (
                              text-decoration: none,
                              padding: 8px,
                              subclasses: (
                                  "&:hover": (
                                      background: #0d1117,
                                  ),
                              ),
                          ),
                      ),
                  ),
              ),
          )
  );

  $nav-tabs: (
      subclasses: (
          ".nav": $nav,
      ),
  );

  $preview-container: (
      margin: 0 0 15px 0,
      subclasses: (
          ".preview": (
              position: relative,
              transition: 0.75s background-color,
            /*border: 1px solid red,*/
              border-bottom: none,
              border-radius: 5px 5px 0 0,
              subclasses: (
                  "h1, h2, h3, h4, h5, h6, p, dl, ol, ul, nav ul, blockquote, pre, table:not(:last-child)" : (
                      margin: 0
                  ),
                  "p" : (
                      padding: 0
                  ),
                  " > .btn" : (
                      margin: 0 10px 0 0
                  )
              )
          ),
          ".tab-content": (
              subclasses: (
                  ".tab": (
                      display: none,
                      subclasses: (
                          "&.active": (
                              display: block,
                          ),
                          ".code": (
                            /*border: 1px solid red,*/
                              border-top: none,
                              border-radius: 0 0 5px 5px,
                              display: block,
                              margin-bottom: 0,
                              width: 100%,
                              position: relative,
                              overflow: auto,
                              subclasses: (
                                  "pre": (
                                      padding: 1rem,
                                      subclasses: (
                                          "code": (
                                              word-break: normal,
                                              background: none,
                                              padding: 0,
                                              font-size: 0.875rem,
                                          ),
                                      ),
                                  ),
                              ),
                          ),
                      ),
                  ),
              ),
          ),
      ),
  );

  $snippet: (
      subclasses: (
          ".navtabs": (
              padding: 0 0 0 8px,
              background: rgb(23, 24, 28),
              border-top: 1px solid rgba(48, 54, 61, 0.75),
              border-bottom: 1px solid rgba(48, 54, 61, 0.75),
              subclasses: (
                  ".nav": $nav,
              ),
          ),
          ".preview-container": $preview-container,
      ),
  );

  @include mixins.generate-component(
          $snippet,
          "snippet",
          app.$config,
          app.$theme
  );
</style>

<style lang="scss">

  /*
  .content {
    .astro-code {
      white-space: normal;
    }
  }

  .content .shiki {
    margin: 0;
    padding: 0.825rem;
  }

  .dragging {
    .snippet {
      .preview {
        &::after {
          background: rgba(58, 69, 82, 1);
        }
      }
    }

    & * {
      cursor: ew-resize;
      -webkit-user-select: none;
      user-select: none;
    }
  }

  @media (prefers-color-scheme: light) {
  }

  @media (prefers-color-scheme: dark) {
  }

  .snippet {
    position: relative;
    margin-bottom: 2rem;

    border-radius: 5px;
    border: 1px solid rgb(58, 69, 82);

    .preview {
      position: relative;
      transition: 0.75s background-color;
      padding: 1rem;

      .inline {
        position: relative;
        z-index: 10;
        display: block;
      }

      .background {
        stroke: rgba(40, 51, 56, 0.63);
        position: absolute;
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        z-index: 1;

        -webkit-user-select: none;
        user-select: none;
      }

      &::after {
        width: 1px;
        height: 100%;
        position: absolute;
        top: 0;
        right: -1px;
        display: inline-block;
        background: transparent;
        transition: 0.75s background-color;
        content: "";
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p,
      dl,
      ol,
      ul,
      blockquote,
      pre,
      table:not(:last-child) {
        margin: 0;
      }

      .resizer {
        position: absolute;
        right: 0;
        top: 0;
        bottom: 0;
        -webkit-user-select: none;
        user-select: none;

        .drag {
          padding: 0.5rem;
          touch-action: pan-y;
          cursor: ew-resize;
          display: block;
          position: absolute;
          top: 50%;
          left: 0.75rem;
          transform: translate(-50%, -50%);
          user-select: none;

          .el {
            background: rgba(100, 116, 139, 0.6);
            border-radius: 10px;
            width: 0.375rem;
            height: 2rem;
            display: block;
          }
        }
      }
    }

    .code {
      display: block;
      margin-bottom: 0;
      width: 100%;
      position: relative;
      overflow: auto;

      code {
        word-break: normal;
        background: inherit;
      }
    }
  }
*/
</style>

<script data-astro-rerun>

    document.querySelectorAll('.snippet').forEach((snippet) => {

        // Tabs
        // Checking first, if element exist
        if (snippet.querySelector('.navtabs')) {
            const nav_items = snippet.querySelectorAll('.navtabs .nav .item');
            const tab_items = snippet.querySelectorAll('.tab-content .tab');

            nav_items.forEach((nav, index) => {
                nav.querySelectorAll('.link').forEach(element => element.addEventListener('click', function (e) {
                    e.preventDefault();
                    nav_items.forEach(element => element.classList.remove('active'));
                    nav.classList.add('active');

                    tab_items.forEach(element => element.classList.remove('active'));
                    tab_items[index].classList.add('active');
                }));
            });
        }

        const preview = snippet.querySelector(".preview");
        if (preview) {
            // Proceed, if preview is enabled

            const resizer = snippet.querySelector(".preview .resizer .drag");
            if (resizer) {
                const container_limit = Math.round(preview.clientWidth / 1.5);

                resizer.onmousedown = (event) => {
                    event.preventDefault();

                    const original_margin = parseFloat(
                        isNaN(preview.style.marginRight) ? preview.style.marginRight : 0,
                    );
                    const original_mouse_x = event.pageX;

                    const event_drag_start_handler = (event) => {
                        const width = original_margin - (event.pageX - original_mouse_x);
                        if (width < container_limit && width > 0) {
                            preview.style.marginRight = width + "px";
                        } else if (width < 0) {
                            preview.style.marginRight = 0 + "px";
                        }
                    };

                    const event_drag_end_handler = (event) => {
                        document.documentElement.classList.remove("dragging");
                        document.removeEventListener("mousemove", event_drag_start_handler);
                        document.removeEventListener("mouseup", event_drag_end_handler);
                    };

                    document.documentElement.classList.add("dragging");
                    document.addEventListener("mousemove", event_drag_start_handler);
                    document.addEventListener("mouseup", event_drag_end_handler);
                };
            }
        }
    });

    // // Clipboard
    // const clipboard = new ClipboardJS('.btn-clipboard', {
    //     target: trigger => trigger.closest('.code-snippet').querySelector('.highlight')
    // })
    //
    // clipboard.on('success', event => {
    //
    // })
    //
    // clipboard.on('error', event => {
    //
    // })
</script>